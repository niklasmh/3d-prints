// Generated by SolidPython 1.1.3 on 2023-02-10 20:43:02


union() {
	import(file = "duck.stl", origin = [0, 0]);
	union() {
		cube(size = 0);
		color(alpha = 0.5000000000, c = [1, 1, 0]) {
			difference() {
				translate(v = [0, 0, -30]) {
					linear_extrude(height = 108) {
						polygon(points = [[0, -10], [50.0, 0.0], [35.35533905932738, 43.84062043356595]]);
					}
				}
				import(file = "duck.stl", origin = [0, 0]);
			}
		}
		color(alpha = 0.5000000000, c = [1, 1, 0]) {
			difference() {
				translate(v = [0, 0, -30]) {
					linear_extrude(height = 108) {
						polygon(points = [[0, -10], [35.35533905932738, 43.84062043356595], [3.061616997868383e-15, 62.0]]);
					}
				}
				import(file = "duck.stl", origin = [0, 0]);
			}
		}
		color(alpha = 0.5000000000, c = [1, 1, 0]) {
			difference() {
				translate(v = [0, 0, -30]) {
					linear_extrude(height = 108) {
						polygon(points = [[0, -10], [3.061616997868383e-15, 62.0], [-35.35533905932737, 43.84062043356595]]);
					}
				}
				import(file = "duck.stl", origin = [0, 0]);
			}
		}
		color(alpha = 0.5000000000, c = [1, 1, 0]) {
			difference() {
				translate(v = [0, 0, -30]) {
					linear_extrude(height = 108) {
						polygon(points = [[0, -10], [-35.35533905932737, 43.84062043356595], [-50.0, 7.59281015471359e-15]]);
					}
				}
				import(file = "duck.stl", origin = [0, 0]);
			}
		}
		color(alpha = 0.5000000000, c = [1, 1, 0]) {
			difference() {
				translate(v = [0, 0, -30]) {
					linear_extrude(height = 108) {
						polygon(points = [[0, -10], [-50.0, 7.59281015471359e-15], [-35.355339059327385, -43.840620433565945]]);
					}
				}
				import(file = "duck.stl", origin = [0, 0]);
			}
		}
		color(alpha = 0.5000000000, c = [1, 1, 0]) {
			difference() {
				translate(v = [0, 0, -30]) {
					linear_extrude(height = 108) {
						polygon(points = [[0, -10], [-35.355339059327385, -43.840620433565945], [-9.184850993605149e-15, -62.0]]);
					}
				}
				import(file = "duck.stl", origin = [0, 0]);
			}
		}
		color(alpha = 0.5000000000, c = [1, 1, 0]) {
			difference() {
				translate(v = [0, 0, -30]) {
					linear_extrude(height = 108) {
						polygon(points = [[0, -10], [-9.184850993605149e-15, -62.0], [35.35533905932737, -43.84062043356596]]);
					}
				}
				import(file = "duck.stl", origin = [0, 0]);
			}
		}
		color(alpha = 0.5000000000, c = [1, 1, 0]) {
			difference() {
				translate(v = [0, 0, -30]) {
					linear_extrude(height = 108) {
						polygon(points = [[0, -10], [35.35533905932737, -43.84062043356596], [50.0, -1.518562030942718e-14]]);
					}
				}
				import(file = "duck.stl", origin = [0, 0]);
			}
		}
		union() {
			translate(v = [0, 0, -33]) {
				linear_extrude(height = 10) {
					polygon(points = [[55.0000000000, 0.0000000000], [38.890872965260115, 48.22468247692255], [3.3677786976552217e-15, 68.2], [-38.89087296526011, 48.22468247692255], [-55.00000000000001, 8.35209117018495e-15], [-38.89087296526013, -48.224682476922546], [-1.0103336092965664e-14, -68.2], [38.89087296526011, -48.22468247692256], [55.00000000000001, -1.67041823403699e-14], [51.0, -1.5489332715615725e-14], [36.06244584051392, -44.71743284223728], [-9.368548013477251e-15, -63.24], [-36.06244584051393, -44.717432842237265], [-51.0, 7.744666357807862e-15], [-36.06244584051392, 44.71743284223727], [3.1228493378257506e-15, 63.24], [36.062445840513924, 44.71743284223727], [51.0000000000, 0.0000000000]]);
				}
			}
			translate(v = [0, 0, -33]) {
				linear_extrude(height = 3) {
					polygon(points = [[55.0000000000, 0.0000000000], [38.890872965260115, 48.22468247692255], [3.3677786976552217e-15, 68.2], [-38.89087296526011, 48.22468247692255], [-55.00000000000001, 8.35209117018495e-15], [-38.89087296526013, -48.224682476922546], [-1.0103336092965664e-14, -68.2], [38.89087296526011, -48.22468247692256], [55.00000000000001, -1.67041823403699e-14]]);
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from numpy import *
from numpy.linalg import *
from solid import *
from solid.utils import *


def create_shape():
    shape = import_stl('duck.stl')
    bx = [-50, 50]
    by = [-62, 62]
    bz = [-30, 78]
    ox = 0
    oy = -10
    return shape, (bx, by, bz), (ox, oy)


def create_mold(shape, aabb, origin, n=4, print_to_files=False):
    bx, by, bz = aabb
    dx = bx[1] - bx[0]
    dy = by[1] - by[0]
    dz = bz[1] - bz[0]
    ox = bx[0] + dx / 2
    oy = by[0] + dy / 2
    rx = dx / 2
    ry = dy / 2

    model = cube(0)
    points = [[rx, 0]]
    molds = []
    pa = 0
    for a in linspace(0, 2*pi, n + 1, endpoint=True)[1:]:
        px = rx * cos(pa)
        py = ry * sin(pa)
        qx = rx * cos(a)
        qy = ry * sin(a)
        points.append([qx, qy])

        mold_part = polygon(points=[
            origin,
            [ox + px, oy + py],
            [ox + qx, oy + qy],
        ])
        mold_part = linear_extrude(dz)(mold_part)
        mold_part = translate((0, 0, bz[0]))(mold_part)
        mold_part -= shape
        mold_part = color([1, 1, 0], 0.5)(mold_part)
        model += mold_part

        slope = atan2(qy - py, qx - px)
        o = array(origin)
        p = array((ox + px, oy + py))
        q = array((ox + qx, oy + qy))
        d = abs(cross(p - q, o - q)) / norm(p - q)
        mold_part = translate((-origin[0], -origin[1], 0))(mold_part)
        mold_part = rotate((0, 0, -slope / pi * 180))(mold_part)
        mold_part = translate((0, d, -dz - bz[0]))(mold_part)
        mold_part = rotate((90, 0, 0))(mold_part)

        molds.append(mold_part)
        pa = a

    if print_to_files:
        import pathlib
        pathlib.Path('molds').mkdir(exist_ok=True)
        for i, mold in enumerate(molds):
            scad_render_to_file(mold, f"mold-{i + 1}.scad")

    def sc(points, scale):
        return [[p[0]*scale, p[1]*scale] for p in points]
    scaffold = polygon(points=sc(points, 1.1) + sc(points[::-1], 1.02))
    scaffold_bottom = polygon(points=sc(points, 1.1))
    scaffold = linear_extrude(10)(scaffold)
    scaffold_bottom = linear_extrude(3)(scaffold_bottom)
    scaffold = translate((0, 0, bz[0] - 3))(scaffold)
    scaffold_bottom = translate((0, 0, bz[0] - 3))(scaffold_bottom)
    scaffold += scaffold_bottom
    if print_to_files:
        import pathlib
        pathlib.Path('molds').mkdir(exist_ok=True)
        scad_render_to_file(scaffold, "mold-scaffold.scad")
    model += scaffold

    return model, molds


shape, aabb, origin = create_shape()
model, _ = create_mold(shape, aabb, origin, n=8, print_to_files=True)

scad_render_to_file(shape + model, 'mold.scad')
 
 
************************************************/
