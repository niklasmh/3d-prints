// Generated by SolidPython 1.0.5 on 2021-08-30 19:40:50


difference() {
	union() {
		cube(size = [40, 50, 2.0000000000]);
		translate(v = [0, 0, 2.0000000000]) {
			cube(size = [15.0000000000, 50, 30]);
		}
		translate(v = [25.0000000000, 0, 2.0000000000]) {
			cube(size = [15.0000000000, 50, 30]);
		}
	}
	translate(v = [-0.0010000000, 2.7272727272727275, 2.0010000000]) {
		cube(size = [40.0020000000, 2.0000000000, 30.0010000000]);
	}
	translate(v = [-0.0010000000, 7.454545454545455, 2.0010000000]) {
		cube(size = [40.0020000000, 2.0000000000, 30.0010000000]);
	}
	translate(v = [-0.0010000000, 12.181818181818183, 2.0010000000]) {
		cube(size = [40.0020000000, 2.0000000000, 30.0010000000]);
	}
	translate(v = [-0.0010000000, 16.90909090909091, 2.0010000000]) {
		cube(size = [40.0020000000, 2.0000000000, 30.0010000000]);
	}
	translate(v = [-0.0010000000, 21.636363636363637, 2.0010000000]) {
		cube(size = [40.0020000000, 2.0000000000, 30.0010000000]);
	}
	translate(v = [-0.0010000000, 26.363636363636367, 2.0010000000]) {
		cube(size = [40.0020000000, 2.0000000000, 30.0010000000]);
	}
	translate(v = [-0.0010000000, 31.090909090909093, 2.0010000000]) {
		cube(size = [40.0020000000, 2.0000000000, 30.0010000000]);
	}
	translate(v = [-0.0010000000, 35.81818181818182, 2.0010000000]) {
		cube(size = [40.0020000000, 2.0000000000, 30.0010000000]);
	}
	translate(v = [-0.0010000000, 40.54545454545455, 2.0010000000]) {
		cube(size = [40.0020000000, 2.0000000000, 30.0010000000]);
	}
	translate(v = [-0.0010000000, 45.27272727272727, 2.0010000000]) {
		cube(size = [40.0020000000, 2.0000000000, 30.0010000000]);
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
from solid import *
from solid.utils import *
from numpy import linspace

cm = 10

count = 12
gap = 0.2*cm
middle_gap = 1*cm

width = 4*cm
length = 5*cm
height = 3*cm

wall_thickness = (width - middle_gap) / 2
bottom_thickness = 0.2*cm
z = 0.001

bottom = cube([width, length, bottom_thickness])
left_wall = translate([0, 0, bottom_thickness])(
    cube([wall_thickness, length, height]))
right_wall = translate([width-wall_thickness, 0, bottom_thickness]
                       )(cube([wall_thickness, length, height]))

gaps = []
for i in linspace(-gap, length, count)[1:-1]:
    gaps.append(translate([-z, i, bottom_thickness+z])(
        cube([width+z*2, gap, height+z])))

scad_render_to_file(bottom + left_wall + right_wall -
                    gaps, "resistor-holder.scad")
 
 
************************************************/
