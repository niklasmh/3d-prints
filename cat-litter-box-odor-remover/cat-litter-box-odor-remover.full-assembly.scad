// Generated by SolidPython 1.1.3 on 2025-03-15 19:19:50
$fn = 64;


union() {
	rotate(a = [90, 0, 0]) {
		difference() {
			union() {
				difference() {
					cube(size = [142, 142, 58.0000000000]);
					translate(v = [0, 0, -13.0000000000]) {
						translate(v = [71.0000000000, 71.0000000000, 0]) {
							sphere(r = 67.0000000000);
						}
					}
					translate(v = [0, 0, -0.1000000000]) {
						union() {
							translate(v = [9, 9, 0]) {
								union() {
									translate(v = [0, 0, 5]) {
										cylinder(h = 58.2000000000, r = 13);
									}
									cylinder(h = 58.2000000000, r = 2.5000000000);
								}
							}
							translate(v = [133, 9, 0]) {
								union() {
									translate(v = [0, 0, 5]) {
										cylinder(h = 58.2000000000, r = 13);
									}
									cylinder(h = 58.2000000000, r = 2.5000000000);
								}
							}
							translate(v = [9, 133, 0]) {
								union() {
									translate(v = [0, 0, 5]) {
										cylinder(h = 58.2000000000, r = 13);
									}
									cylinder(h = 58.2000000000, r = 2.5000000000);
								}
							}
							translate(v = [133, 133, 0]) {
								union() {
									translate(v = [0, 0, 5]) {
										cylinder(h = 58.2000000000, r = 13);
									}
									cylinder(h = 58.2000000000, r = 2.5000000000);
								}
							}
						}
					}
				}
				translate(v = [0, 0, 58.0000000000]) {
					translate(v = [21.3000000000, 71.0000000000, 0]) {
						cylinder(h = 30, r = 13);
					}
				}
			}
			translate(v = [0, 0, -0.1000000000]) {
				translate(v = [21.3000000000, 71.0000000000, 0]) {
					cylinder(h = 88.2000000000, r = 10);
				}
			}
		}
	}
	translate(v = [0, 26, 0]) {
		translate(v = [0, 0, 142]) {
			rotate(a = [-90, 0, 0]) {
				difference() {
					union() {
						difference() {
							cube(size = [142, 142, 58.0000000000]);
							translate(v = [0, 0, -13.0000000000]) {
								translate(v = [71.0000000000, 71.0000000000, 0]) {
									sphere(r = 67.0000000000);
								}
							}
							translate(v = [0, 0, -0.1000000000]) {
								union() {
									translate(v = [9, 9, 0]) {
										union() {
											translate(v = [0, 0, 5]) {
												cylinder(h = 58.2000000000, r = 13);
											}
											cylinder(h = 58.2000000000, r = 2.5000000000);
										}
									}
									translate(v = [133, 9, 0]) {
										union() {
											translate(v = [0, 0, 5]) {
												cylinder(h = 58.2000000000, r = 13);
											}
											cylinder(h = 58.2000000000, r = 2.5000000000);
										}
									}
									translate(v = [9, 133, 0]) {
										union() {
											translate(v = [0, 0, 5]) {
												cylinder(h = 58.2000000000, r = 13);
											}
											cylinder(h = 58.2000000000, r = 2.5000000000);
										}
									}
									translate(v = [133, 133, 0]) {
										union() {
											translate(v = [0, 0, 5]) {
												cylinder(h = 58.2000000000, r = 13);
											}
											cylinder(h = 58.2000000000, r = 2.5000000000);
										}
									}
								}
							}
						}
						translate(v = [0, 0, 28.4000000000]) {
							translate(v = [35.5000000000, 0, 0]) {
								rotate(a = [90, 0, 0]) {
									cylinder(h = 30, r = 13);
								}
							}
						}
					}
					translate(v = [0, 0, 28.4000000000]) {
						translate(v = [35.5000000000, 71.0000000000, 0]) {
							rotate(a = [90, 0, 0]) {
								cylinder(h = 172.2000000000, r = 10);
							}
						}
					}
				}
			}
		}
	}
	translate(v = [200, 0, 0]) {
		translate(v = [0, 0, 50]) {
			difference() {
				union() {
					cube(size = [200, 50, 40]);
					translate(v = [-10, -10, 0]) {
						cube(size = [220, 70, 3]);
					}
					translate(v = [0, 0, 25.0000000000]) {
						translate(v = [100.0000000000, 0, 0]) {
							rotate(a = [90, 0, 0]) {
								rotate(a = [0, 0, 90]) {
									cylinder(h = 30, r = 13);
								}
							}
						}
					}
				}
				translate(v = [0, 0, 3]) {
					translate(v = [3, 3, 0]) {
						cube(size = [194, 44, 37]);
					}
				}
				translate(v = [0, 0, 25.0000000000]) {
					translate(v = [100.0000000000, -0.1000000000, 0]) {
						rotate(a = [90, 0, 0]) {
							rotate(a = [0, 0, 90]) {
								cylinder(h = 30.2000000000, r = 10);
							}
						}
					}
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
import numpy as np
from solid import *
from solid.utils import *

z = 0.1
z2 = 0.2
m = 2

t = translate
tx = lambda e, x: t([x, 0, 0])(e)
ty = lambda e, x: t([0, x, 0])(e)
tz = lambda e, x: t([0, 0, x])(e)
txy = lambda e, x, y: t([x, y, 0])(e)
r = rotate
rx = lambda e, x: r([x, 0, 0])(e)
ry = lambda e, x: r([0, x, 0])(e)
rz = lambda e, x: r([0, 0, x])(e)
sc = scale
cos = np.cos
sin = np.sin
pi = np.pi
save = lambda m, n: scad_render_to_file(m, n, file_header='$fn = 64;')


# Parameters
w_fan = 140 + m # Width of fan
h_fan = 140 + m # Height of fan
d_fan = 24 + m # Depth of fan
r_fan = 134 / 2 # Radius
ox_fan_hole = 7 + m # Offset x of fan screw hole
oy_fan_hole = 7 + m # Offset y of fan screw hole
r_fan_hole = 2.5 # Radius of fan screw hole
re_fan_hole = 13 # Extra radius of fan screw hole
d_fan_hole = 5 # Depth of fan screw hole

x_ihose = 0.15 * w_fan # Offset x of hose input connector
y_ihose = 0.50 * h_fan # Offset y of hose input connector
x_ohose = 0.25 * w_fan # Offset x of hose output connector
y_ohose = 0.40 * w_fan / 2 # Offset y of hose output connector
r_hose = 13 # Radius of hose connector
m_hose = 3 # Margin of hose connector
d_hose = 30 # Depth of hose connector

# Window exhaust parameters
w_window = 200  # Width of window adapter
h_window = 50   # Height of window adapter
d_window = 40   # Depth of window adapter
t_window = 3    # Thickness of window adapter walls
f_window = 10   # Flange width for window adapter


def create_fan_box():
  d = w_fan / 2 - d_fan / 2
  fan_box = cube([w_fan, h_fan, d])
  fan = sphere(r=r_fan)
  fan = txy(fan, w_fan / 2, h_fan / 2)
  fan = tz(fan, -d_fan / 2)

  hole = cylinder(r=re_fan_hole, h=d + z2)
  hole = tz(hole, d_fan_hole)
  hole += cylinder(r=r_fan_hole, h=d + z2)
  ox, oy = ox_fan_hole, oy_fan_hole
  holes = txy(hole, ox, oy)
  holes += txy(hole, w_fan - ox, oy)
  holes += txy(hole, ox, h_fan - oy)
  holes += txy(hole, w_fan - ox, h_fan - oy)
  holes = tz(holes, -z)

  return fan_box - fan - holes


def create_fan_box_input():
  fan_box = create_fan_box()

  d = w_fan / 2 - d_fan / 2
  hose_input = cylinder(r=r_hose, h=d_hose)
  hose_input = txy(hose_input, x_ihose, y_ihose)
  hose_input = tz(hose_input, d)
  hose_input_hole = cylinder(r=r_hose - m_hose, h=d + d_hose + z2)
  hose_input_hole = txy(hose_input_hole, x_ihose, y_ihose)
  hose_input_hole = tz(hose_input_hole, -z)

  return fan_box + hose_input - hose_input_hole


def create_fan_box_output():
  fan_box = create_fan_box()

  d = w_fan / 2 - d_fan / 2
  hose_output = cylinder(r=r_hose, h=d_hose)
  hose_output = rx(hose_output, 90)
  hose_output = tx(hose_output, x_ohose)
  hose_output = tz(hose_output, y_ohose)
  hose_output_hole = cylinder(r=r_hose - m_hose, h=h_fan + d_hose + z2)
  hose_output_hole = rx(hose_output_hole, 90)
  hose_output_hole = txy(hose_output_hole, x_ohose, h_fan / 2)
  hose_output_hole = tz(hose_output_hole, y_ohose)

  return fan_box + hose_output - hose_output_hole


def create_window_exhaust():
  # Create the main body of the window adapter
  main_body = cube([w_window, h_window, d_window])
  
  # Create the hollow inside - making it slightly smaller than the outer dimensions
  hollow_width = w_window - 2*t_window
  hollow_height = h_window - 2*t_window
  hollow_depth = d_window - t_window
  hollow = cube([hollow_width, hollow_height, hollow_depth])
  hollow = txy(hollow, t_window, t_window)
  hollow = tz(hollow, t_window)
  
  # Create the flange that sits against the window
  flange = cube([w_window + 2*f_window, h_window + 2*f_window, t_window])
  flange = txy(flange, -f_window, -f_window)
  
  # Create the hose connector - positioned on the bottom side
  hose_input = cylinder(r=r_hose, h=d_hose)
  hose_input = rz(hose_input, 90)  # Rotate for proper orientation
  hose_input = rx(hose_input, 90)  # Rotate to point downward
  hose_input = txy(hose_input, w_window/2, 0)  # Position at the bottom center
  hose_input = tz(hose_input, h_window/2)  # Adjust z position
  
  # Create the hole for the hose
  hose_hole = cylinder(r=r_hose - m_hose, h=d_hose + z2)
  hose_hole = rz(hose_hole, 90)  # Rotate for proper orientation
  hose_hole = rx(hose_hole, 90)  # Rotate to point downward
  hose_hole = txy(hose_hole, w_window/2, -z)  # Position at the bottom center
  hose_hole = tz(hose_hole, h_window/2)  # Adjust z position
  
  # Combine all parts
  window_exhaust = main_body + flange + hose_input - hollow - hose_hole
  
  return window_exhaust


fan_box_input = create_fan_box_input()
fan_box_output = create_fan_box_output()
window_exhaust = create_window_exhaust()

import os
folder = os.path.basename(os.path.dirname(__file__))
save(rx(fan_box_input, 90) + ty(tz(rx(fan_box_output, -90), h_fan), d_fan), folder + ".assembly.scad")
save(fan_box_input, folder + ".fan-box-input.scad")
save(fan_box_output, folder + ".fan-box-output.scad")
save(window_exhaust, folder + ".window-exhaust.scad")

# Create a proper full assembly with correct positioning
# Position the window exhaust at an appropriate distance from the fan output
x_offset = 200  # Distance between fan output and window exhaust
y_offset = 0    # Vertical alignment
z_offset = 50   # Height alignment - raised to better align with the hose

full_assembly = rx(fan_box_input, 90) + ty(tz(rx(fan_box_output, -90), h_fan), d_fan)
# Position window exhaust to the right and adjust height
full_assembly += txy(tz(window_exhaust, z_offset), x_offset, y_offset)

save(full_assembly, folder + ".full-assembly.scad")
 
 
************************************************/
